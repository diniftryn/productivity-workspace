{"ast":null,"code":"import React,{useState}from\"react\";import{useTasksContext}from\"../hooks/useTasksContext\";import{useAuthContext}from\"../hooks/useAuthContext\";import\"../css/TaskForm.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const TaskForm=()=>{const{dispatch}=useTasksContext();const{user}=useAuthContext();const[task,setTask]=useState({description:\"\",isEdit:false,isDone:false});const[error,setError]=useState(\"\");const[emptyFields,setEmptyFields]=useState([]);function handleChange(inputIdentifier,value){setTask({...task,[inputIdentifier]:value});}const handleSubmit=async e=>{e.preventDefault();if(!user){setError(\"Log in to add tasks :)\");return;}const response=await fetch(\"https://productivity-workspace-d73580ee4fe9.herokuapp.com/api/tasks\",{method:\"POST\",body:JSON.stringify(task),headers:{\"Content-Type\":\"application/json\",Authorization:\"Bearer \".concat(user.token)}});const json=await response.json();if(!response.ok){setError(json.error);setEmptyFields(json.emptyFields);}if(response.ok){console.log(\"New task added successfully: \",json);setTask({description:\"\",isEdit:false,isDone:false});dispatch({type:\"CREATE_TASK\",payload:json});}};return/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:task.description,onChange:e=>handleChange(\"description\",e.target.value),className:emptyFields.includes(\"description\")?\"error\":\"\"}),/*#__PURE__*/_jsx(\"button\",{children:\"Add Task\"}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"error\",children:error})]});};export default TaskForm;","map":{"version":3,"names":["React","useState","useTasksContext","useAuthContext","jsx","_jsx","jsxs","_jsxs","TaskForm","dispatch","user","task","setTask","description","isEdit","isDone","error","setError","emptyFields","setEmptyFields","handleChange","inputIdentifier","value","handleSubmit","e","preventDefault","response","fetch","method","body","JSON","stringify","headers","Authorization","concat","token","json","ok","console","log","type","payload","onSubmit","children","onChange","target","className","includes"],"sources":["/Users/dini/Desktop/productivity-workspace/frontend/src/components/TaskForm.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useTasksContext } from \"../hooks/useTasksContext\";\nimport { useAuthContext } from \"../hooks/useAuthContext\";\nimport \"../css/TaskForm.css\";\n\nconst TaskForm = () => {\n  const { dispatch } = useTasksContext();\n  const { user } = useAuthContext();\n  const [task, setTask] = useState({ description: \"\", isEdit: false, isDone: false });\n  const [error, setError] = useState(\"\");\n  const [emptyFields, setEmptyFields] = useState([]);\n\n  function handleChange(inputIdentifier, value) {\n    setTask({ ...task, [inputIdentifier]: value });\n  }\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (!user) {\n      setError(\"Log in to add tasks :)\");\n      return;\n    }\n\n    const response = await fetch(\"https://productivity-workspace-d73580ee4fe9.herokuapp.com/api/tasks\", {\n      method: \"POST\",\n      body: JSON.stringify(task),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${user.token}`\n      }\n    });\n    const json = await response.json();\n\n    if (!response.ok) {\n      setError(json.error);\n      setEmptyFields(json.emptyFields);\n    }\n    if (response.ok) {\n      console.log(\"New task added successfully: \", json);\n      setTask({ description: \"\", isEdit: false, isDone: false });\n      dispatch({ type: \"CREATE_TASK\", payload: json });\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={task.description} onChange={e => handleChange(\"description\", e.target.value)} className={emptyFields.includes(\"description\") ? \"error\" : \"\"} />\n      <button>Add Task</button>\n      {error && <div className=\"error\">{error}</div>}\n    </form>\n  );\n};\n\nexport default TaskForm;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,eAAe,KAAQ,0BAA0B,CAC1D,OAASC,cAAc,KAAQ,yBAAyB,CACxD,MAAO,qBAAqB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAE7B,KAAM,CAAAC,QAAQ,CAAGA,CAAA,GAAM,CACrB,KAAM,CAAEC,QAAS,CAAC,CAAGP,eAAe,CAAC,CAAC,CACtC,KAAM,CAAEQ,IAAK,CAAC,CAAGP,cAAc,CAAC,CAAC,CACjC,KAAM,CAACQ,IAAI,CAAEC,OAAO,CAAC,CAAGX,QAAQ,CAAC,CAAEY,WAAW,CAAE,EAAE,CAAEC,MAAM,CAAE,KAAK,CAAEC,MAAM,CAAE,KAAM,CAAC,CAAC,CACnF,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGhB,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACiB,WAAW,CAAEC,cAAc,CAAC,CAAGlB,QAAQ,CAAC,EAAE,CAAC,CAElD,QAAS,CAAAmB,YAAYA,CAACC,eAAe,CAAEC,KAAK,CAAE,CAC5CV,OAAO,CAAC,CAAE,GAAGD,IAAI,CAAE,CAACU,eAAe,EAAGC,KAAM,CAAC,CAAC,CAChD,CAEA,KAAM,CAAAC,YAAY,CAAG,KAAM,CAAAC,CAAC,EAAI,CAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC,CAElB,GAAI,CAACf,IAAI,CAAE,CACTO,QAAQ,CAAC,wBAAwB,CAAC,CAClC,OACF,CAEA,KAAM,CAAAS,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,qEAAqE,CAAE,CAClGC,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACpB,IAAI,CAAC,CAC1BqB,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClCC,aAAa,WAAAC,MAAA,CAAYxB,IAAI,CAACyB,KAAK,CACrC,CACF,CAAC,CAAC,CACF,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAV,QAAQ,CAACU,IAAI,CAAC,CAAC,CAElC,GAAI,CAACV,QAAQ,CAACW,EAAE,CAAE,CAChBpB,QAAQ,CAACmB,IAAI,CAACpB,KAAK,CAAC,CACpBG,cAAc,CAACiB,IAAI,CAAClB,WAAW,CAAC,CAClC,CACA,GAAIQ,QAAQ,CAACW,EAAE,CAAE,CACfC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAEH,IAAI,CAAC,CAClDxB,OAAO,CAAC,CAAEC,WAAW,CAAE,EAAE,CAAEC,MAAM,CAAE,KAAK,CAAEC,MAAM,CAAE,KAAM,CAAC,CAAC,CAC1DN,QAAQ,CAAC,CAAE+B,IAAI,CAAE,aAAa,CAAEC,OAAO,CAAEL,IAAK,CAAC,CAAC,CAClD,CACF,CAAC,CAED,mBACE7B,KAAA,SAAMmC,QAAQ,CAAEnB,YAAa,CAAAoB,QAAA,eAC3BtC,IAAA,UAAOmC,IAAI,CAAC,MAAM,CAAClB,KAAK,CAAEX,IAAI,CAACE,WAAY,CAAC+B,QAAQ,CAAEpB,CAAC,EAAIJ,YAAY,CAAC,aAAa,CAAEI,CAAC,CAACqB,MAAM,CAACvB,KAAK,CAAE,CAACwB,SAAS,CAAE5B,WAAW,CAAC6B,QAAQ,CAAC,aAAa,CAAC,CAAG,OAAO,CAAG,EAAG,CAAE,CAAC,cACzK1C,IAAA,WAAAsC,QAAA,CAAQ,UAAQ,CAAQ,CAAC,CACxB3B,KAAK,eAAIX,IAAA,QAAKyC,SAAS,CAAC,OAAO,CAAAH,QAAA,CAAE3B,KAAK,CAAM,CAAC,EAC1C,CAAC,CAEX,CAAC,CAED,cAAe,CAAAR,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}