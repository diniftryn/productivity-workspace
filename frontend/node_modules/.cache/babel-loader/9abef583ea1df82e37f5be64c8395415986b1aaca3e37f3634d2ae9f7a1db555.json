{"ast":null,"code":"var _jsxFileName = \"/Users/dini/Desktop/productivity-workspace/frontend/src/components/PomodoroTimer.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nimport \"../css/PomodoroTimer.css\";\nimport clickStart from \"../assets/clickStart.mp3\";\nimport click from \"../assets/click.mp3\";\nimport alarm from \"../assets/alarm.mp3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PomodoroTimer() {\n  _s();\n  const [sessionLength, setSessionLength] = useState(1500);\n  const [breakLength, setBreakLength] = useState(300);\n  const [timer, setTimer] = useState(1500);\n  const [timerMinutes, setTimerMinutes] = useState(\"00\");\n  const [timerSeconds, setTimerSeconds] = useState(\"00\");\n  const [timerIntervalId, setTimerIntervalId] = useState(null);\n  const [isSession, setIsSession] = useState(false);\n  const [sessionType, setSessionType] = useState(\"Session\");\n  const audioRef = useRef();\n  let hasStarted = timerIntervalId !== null; // check timer state\n\n  const audioRefClickStart = useRef(new Audio(clickStart));\n  const audioRefClick = useRef(new Audio(click));\n  // audioRefClick.current.volume = 0.4;\n  const audioRefAlarm = useRef(new Audio(alarm));\n  // audioRefAlarm.current.volume = 0.4;\n\n  // // update timer display\n  useEffect(() => {\n    if (timer === 0) {\n      audioRefAlarm.current.play();\n      if (sessionType === \"Session\") {\n        setSessionType(\"Break\");\n        setTimer(breakLength);\n      } else {\n        setSessionType(\"Session\");\n        setTimer(sessionLength);\n      }\n    }\n  }, [timer, sessionType]);\n  useEffect(() => {\n    setTimer(sessionLength);\n  }, [sessionLength]);\n  useEffect(() => {\n    let time = secondsToTime(timer);\n    setTimerMinutes(time[0]);\n    setTimerSeconds(time[1]);\n  }, [timer]);\n  function toggleCountDown() {\n    if (hasStarted) {\n      // started mode\n      if (timerIntervalId) {\n        clearInterval(timerIntervalId);\n      }\n      setTimerIntervalId(null);\n    } else {\n      // stopped mode\n      // create accurate date timer with date\n      const newIntervalId = setInterval(() => {\n        setTimer(prevTime => {\n          let newTime = prevTime - 1;\n          let time = secondsToTime(newTime);\n          setTimerMinutes(time[0]);\n          setTimerSeconds(time[1]);\n          return newTime;\n        });\n      }, 1000);\n      setTimerIntervalId(newIntervalId);\n    }\n  }\n\n  // return minutes and seconds of seconds\n  function secondsToTime(seconds) {\n    return [Math.floor(seconds / 60), seconds % 60];\n  }\n\n  // zero paddings if < 10\n  function formatDisplayTime(time) {\n    if (time < 10) {\n      return `0${time}`;\n    } else {\n      return time;\n    }\n  }\n  function handleBreakLengthChange(e) {\n    if (hasStarted) return; // guard against change when running\n\n    if (e.target.id === \"break-decrement\" && breakLength > 60) {\n      setBreakLength(prevVal => prevVal - 60);\n    } else if (e.target.id === \"break-increment\" && breakLength < 3600) {\n      setBreakLength(prevVal => prevVal + 60);\n    }\n  }\n  function handleSessionLengthChange(e) {\n    if (hasStarted) return; // guard against change when running\n\n    if (e.target.id === \"session-decrement\" && sessionLength > 60) {\n      setSessionLength(prevVal => prevVal - 60);\n    } else if (e.target.id === \"session-increment\" && sessionLength < 3600) {\n      setSessionLength(prevVal => prevVal + 60);\n    }\n  }\n  function handleResetTimer() {\n    var _audioRef$current;\n    audioRef === null || audioRef === void 0 ? void 0 : (_audioRef$current = audioRef.current) === null || _audioRef$current === void 0 ? void 0 : _audioRef$current.load();\n    if (timerIntervalId) {\n      clearInterval(timerIntervalId);\n    }\n    setTimerIntervalId(null);\n    setSessionLength(1500);\n    setBreakLength(300);\n    setSessionType(\"Session\");\n    setTimer(1500);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Pomodoro\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Pomodoro Timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"time-left\",\n        children: [formatDisplayTime(timerMinutes), \":\", formatDisplayTime(timerSeconds)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"start_stop\",\n        className: \"pomo-btn\",\n        onClick: e => {\n          if (hasStarted) {\n            audioRefClick.current.play();\n          } else {\n            audioRefClickStart.current.play();\n          }\n          toggleCountDown();\n        },\n        children: hasStarted ? \"Pause\" : \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"reset\",\n        className: \"pomo-btn\",\n        onClick: () => {\n          audioRefClick.current.play();\n          handleResetTimer();\n        },\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n_s(PomodoroTimer, \"vuQ/4vKPlqcvpfIzAKbb1jqb8Ts=\");\n_c = PomodoroTimer;\nvar _c;\n$RefreshReg$(_c, \"PomodoroTimer\");","map":{"version":3,"names":["useState","useEffect","useRef","clickStart","click","alarm","jsxDEV","_jsxDEV","PomodoroTimer","_s","sessionLength","setSessionLength","breakLength","setBreakLength","timer","setTimer","timerMinutes","setTimerMinutes","timerSeconds","setTimerSeconds","timerIntervalId","setTimerIntervalId","isSession","setIsSession","sessionType","setSessionType","audioRef","hasStarted","audioRefClickStart","Audio","audioRefClick","audioRefAlarm","current","play","time","secondsToTime","toggleCountDown","clearInterval","newIntervalId","setInterval","prevTime","newTime","seconds","Math","floor","formatDisplayTime","handleBreakLengthChange","e","target","id","prevVal","handleSessionLengthChange","handleResetTimer","_audioRef$current","load","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/dini/Desktop/productivity-workspace/frontend/src/components/PomodoroTimer.js"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport \"../css/PomodoroTimer.css\";\nimport clickStart from \"../assets/clickStart.mp3\";\nimport click from \"../assets/click.mp3\";\nimport alarm from \"../assets/alarm.mp3\";\n\nexport default function PomodoroTimer() {\n  const [sessionLength, setSessionLength] = useState(1500);\n  const [breakLength, setBreakLength] = useState(300);\n\n  const [timer, setTimer] = useState(1500);\n  const [timerMinutes, setTimerMinutes] = useState(\"00\");\n  const [timerSeconds, setTimerSeconds] = useState(\"00\");\n  const [timerIntervalId, setTimerIntervalId] = useState(null);\n  const [isSession, setIsSession] = useState(false);\n  const [sessionType, setSessionType] = useState(\"Session\");\n\n  const audioRef = useRef();\n  let hasStarted = timerIntervalId !== null; // check timer state\n\n  const audioRefClickStart = useRef(new Audio(clickStart));\n  const audioRefClick = useRef(new Audio(click));\n  // audioRefClick.current.volume = 0.4;\n  const audioRefAlarm = useRef(new Audio(alarm));\n  // audioRefAlarm.current.volume = 0.4;\n\n  // // update timer display\n  useEffect(() => {\n    if (timer === 0) {\n      audioRefAlarm.current.play();\n      if (sessionType === \"Session\") {\n        setSessionType(\"Break\");\n        setTimer(breakLength);\n      } else {\n        setSessionType(\"Session\");\n        setTimer(sessionLength);\n      }\n    }\n  }, [timer, sessionType]);\n\n  useEffect(() => {\n    setTimer(sessionLength);\n  }, [sessionLength]);\n\n  useEffect(() => {\n    let time = secondsToTime(timer);\n    setTimerMinutes(time[0]);\n    setTimerSeconds(time[1]);\n  }, [timer]);\n\n  function toggleCountDown() {\n    if (hasStarted) {\n      // started mode\n      if (timerIntervalId) {\n        clearInterval(timerIntervalId);\n      }\n      setTimerIntervalId(null);\n    } else {\n      // stopped mode\n      // create accurate date timer with date\n      const newIntervalId = setInterval(() => {\n        setTimer(prevTime => {\n          let newTime = prevTime - 1;\n          let time = secondsToTime(newTime);\n          setTimerMinutes(time[0]);\n          setTimerSeconds(time[1]);\n          return newTime;\n        });\n      }, 1000);\n      setTimerIntervalId(newIntervalId);\n    }\n  }\n\n  // return minutes and seconds of seconds\n  function secondsToTime(seconds) {\n    return [Math.floor(seconds / 60), seconds % 60];\n  }\n\n  // zero paddings if < 10\n  function formatDisplayTime(time) {\n    if (time < 10) {\n      return `0${time}`;\n    } else {\n      return time;\n    }\n  }\n\n  function handleBreakLengthChange(e) {\n    if (hasStarted) return; // guard against change when running\n\n    if (e.target.id === \"break-decrement\" && breakLength > 60) {\n      setBreakLength(prevVal => prevVal - 60);\n    } else if (e.target.id === \"break-increment\" && breakLength < 3600) {\n      setBreakLength(prevVal => prevVal + 60);\n    }\n  }\n\n  function handleSessionLengthChange(e) {\n    if (hasStarted) return; // guard against change when running\n\n    if (e.target.id === \"session-decrement\" && sessionLength > 60) {\n      setSessionLength(prevVal => prevVal - 60);\n    } else if (e.target.id === \"session-increment\" && sessionLength < 3600) {\n      setSessionLength(prevVal => prevVal + 60);\n    }\n  }\n\n  function handleResetTimer() {\n    audioRef?.current?.load();\n    if (timerIntervalId) {\n      clearInterval(timerIntervalId);\n    }\n    setTimerIntervalId(null);\n    setSessionLength(1500);\n    setBreakLength(300);\n    setSessionType(\"Session\");\n    setTimer(1500);\n  }\n\n  return (\n    <div className=\"Pomodoro\">\n      <h2>Pomodoro Timer</h2>\n      {/* Controls */}\n      {/* <div className=\"length-controls\">\n            <div className=\"length-control\">\n              <p id=\"break-label\">Break Length</p>\n              <div className=\"length-control-btns\">\n                <button id=\"break-decrement\" onClick={e => handleBreakLengthChange(e)}>\n                  &lt;\n                </button>\n                <div id=\"break-length\">{Math.floor(breakLength / 60)}</div>\n                <button id=\"break-increment\" onClick={e => handleBreakLengthChange(e)}>\n                  &gt;\n                </button>\n              </div>\n            </div>\n\n            <div className=\"length-control\">\n              <p id=\"session-label\">Session Length</p>\n              <div className=\"length-control-btns\">\n                <button id=\"session-decrement\" onClick={e => handleSessionLengthChange(e)}>\n                  &lt;\n                </button>\n                <div id=\"session-length\">{sessionLength / 60}</div>\n                <button id=\"session-increment\" onClick={e => handleSessionLengthChange(e)}>\n                  &gt;\n                </button>\n              </div>\n            </div>\n          </div> */}\n\n      {/* Timer */}\n      <div className=\"timer\">\n        {/* <p id=\"timer-label\">{sessionType}</p> */}\n        <div id=\"time-left\">\n          {formatDisplayTime(timerMinutes)}:{formatDisplayTime(timerSeconds)}\n        </div>\n      </div>\n\n      <div className=\"timer-control\">\n        <button\n          id=\"start_stop\"\n          className=\"pomo-btn\"\n          onClick={e => {\n            if (hasStarted) {\n              audioRefClick.current.play();\n            } else {\n              audioRefClickStart.current.play();\n            }\n            toggleCountDown();\n          }}\n        >\n          {hasStarted ? \"Pause\" : \"Start\"}\n        </button>\n        <button\n          id=\"reset\"\n          className=\"pomo-btn\"\n          onClick={() => {\n            audioRefClick.current.play();\n            handleResetTimer();\n          }}\n        >\n          Reset\n        </button>\n        {/* <audio id=\"click\" preload=\"auto\" ref={audioRefClick} src=\"https://www.myinstants.com/en/instant/button-click-93467/?utm_source=copy&utm_medium=share\" /> */}\n        {/* <audio id=\"beep\" preload=\"auto\" ref={audioRef} src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\" /> */}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}